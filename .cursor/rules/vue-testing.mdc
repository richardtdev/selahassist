---
description: 
globs: resources/js/__tests__/**/*.spec.ts,resources/js/__tests__/**/*.test.ts
alwaysApply: false
---
# Vue Testing Rules

## General Testing Principles
- Write tests for all new components
- Focus on testing component behavior, not implementation details
- Test props, events, slots, and user interactions
- Use descriptive test names that explain the behavior being tested
- Follow the Arrange, Act, Assert pattern

## Component Testing
- Use Vue Test Utils for component testing
- Test component rendering and reactivity
- Test component props and their default values
- Test emitted events
- Test slots and their rendering
- Test component lifecycle methods

## Setup Guidelines
- Import the component being tested
- Mount the component with necessary props
- Use `shallowMount` for isolated component testing
- Use `mount` when child components are relevant to the test
- Properly mock dependencies and Inertia

## Assertions
- Assert component existence with `wrapper.exists()`
- Assert text content with `wrapper.text()`
- Assert HTML structure with `wrapper.html()`
- Assert prop values with `wrapper.props()`
- Assert emitted events with `wrapper.emitted()`
- Assert class presence with `wrapper.classes()`

## Interaction Testing
- Trigger click events with `wrapper.find().trigger('click')`
- Set input values with `wrapper.find().setValue()`
- Trigger form submission with `wrapper.find('form').trigger('submit')`
- Wait for async operations with `await flushPromises()`
- Test component reactivity after state changes

## Best Practices
- Organize tests by component behavior
- Keep tests focused and specific
- Mock API calls and external dependencies
- Reset mocks between tests
- Use `beforeEach` for common setup
- Use data factories for consistent test data